services:
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/db:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  rest-api:
    build:
      context: .
      dockerfile: ./rest-api/Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports:
      - "${REST_API_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      ENVIRONMENT: ${ENVIRONMENT}
    volumes:
      - ./rest-api/app:/app/app
      - ./common:/app/common
      - ./logs/rest-api:/app/logs
    profiles:
      - rest
      - full

  grpc-api:
    build:
      context: .
      dockerfile: ./grpc-api/Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports:
      - "${GRPC_API_PORT}:50051"
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PORT: ${GRPC_API_PORT}
      ENVIRONMENT: ${ENVIRONMENT}
    volumes:
      - ./grpc-api/app:/app/app
      - ./common:/app/common
      - ./logs/grpc-api:/app/logs
    profiles:
      - grpc
      - full

  graphql-api:
    build:
      context: .
      dockerfile: ./graphql-api/Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports:
      - "${GRAPHQL_API_PORT}:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      ENVIRONMENT: ${ENVIRONMENT}
    volumes:
      - ./graphql-api/app:/app/app
      - ./common:/app/common
      - ./logs/graphql-api:/app/logs
    profiles:
      - graphql
      - full

  tests:
    build:
      context: .
      dockerfile: ./tests/Dockerfile
    volumes:
      - ./tests/k6-scripts:/tests/k6-scripts
      - ./tests/ghz-tests.sh:/tests/ghz-tests.sh
      - ./tests/run-tests.sh:/tests/run-tests.sh
      - ./tests/analyze.py:/tests/analyze.py
      - ./results:/tests/results
      - ./grpc-api/app/protos:/tests/protos
      - ./logs/tests:/tests/logs
    depends_on:
      - rest-api
      - graphql-api
      - grpc-api
    environment:
      - REST_API_URL=http://rest-api:${REST_API_PORT}
      - GRAPHQL_API_URL=http://graphql-api:${GRAPHQL_API_PORT}/graphql
      - GRPC_API_URL=grpc-api:${GRPC_API_PORT}
    profiles:
      - test

volumes:
  postgres_data: